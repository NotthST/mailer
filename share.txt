import io, os, configparser, pandas as pd
from office365.sharepoint.client_context import ClientContext
from office365.sharepoint.files.file import File

# Use RawConfigParser to avoid % interpolation
CFG = configparser.RawConfigParser()
CFG.read("config.ini")

SP_SITE_URL = CFG.get("sharepoint", "SITE_URL", fallback="")
SP_XLSX_SERVER_RELATIVE = CFG.get("sharepoint", "XLSX_SERVER_RELATIVE_PATH", fallback="")
LOCAL_XLSX_PATH = CFG.get("local", "XLSX_PATH", fallback="")
LOCAL_CSV_PATH  = CFG.get("local", "CSV_PATH",  fallback="")

def _sp_ctx():
    if not SP_SITE_URL:
        raise RuntimeError("SharePoint SITE_URL not configured in config.ini")
    return ClientContext(SP_SITE_URL)

def _sp_download(path: str) -> bytes:
    ctx = _sp_ctx()
    f = ctx.web.get_file_by_server_relative_url(path)
    return File.open_binary(ctx, f.serverRelativeUrl).content

def load_distribution_df() -> pd.DataFrame:
    # 1) Local files first
    if LOCAL_XLSX_PATH and os.path.exists(LOCAL_XLSX_PATH):
        return pd.read_excel(LOCAL_XLSX_PATH)  # requires openpyxl>=3.1.2
    if LOCAL_CSV_PATH and os.path.exists(LOCAL_CSV_PATH):
        return pd.read_csv(LOCAL_CSV_PATH)

    # 2) SharePoint XLSX
    if SP_SITE_URL and SP_XLSX_SERVER_RELATIVE:
        content = _sp_download(SP_XLSX_SERVER_RELATIVE)
        return pd.read_excel(io.BytesIO(content))  # <-- XLSX from SP

    # 3) Fallback empty frame
    return pd.DataFrame(columns=["Applications", "cc", "cci", "support mail"])
